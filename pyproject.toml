[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "plotpointe"
version = "0.1.0"
description = "Multi-Modal Graph Attention Network Recommendation System with PyTorch + GCP Vertex AI"
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = {text = "MIT"}
authors = [
    {name = "Axionis", email = "namaste.world.dev@gmail.com"}
]
keywords = [
    "machine-learning",
    "deep-learning",
    "graph-neural-networks",
    "graph-attention-networks",
    "recommendation-systems",
    "multi-modal-learning",
    "gcp",
    "vertex-ai",
    "pytorch",
    "transformers",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.urls]
Homepage = "https://github.com/Axionis47/gat-recsys"
Repository = "https://github.com/Axionis47/gat-recsys"
Documentation = "https://github.com/Axionis47/gat-recsys/tree/main/docs"
Issues = "https://github.com/Axionis47/gat-recsys/issues"


# Limit package discovery to the main library only to avoid flat-layout errors
[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
where = ["."]
include = [
  "plotpointe*",
]
exclude = [
  "tests*", "tmp*", "data*", "docker*", "graphs*", "vertex*", "serving*", "bigquery*",
  "terraform*", "manifests*", "embeddings*", "experiments*", "tools*"
]

# ============================================================================
# Tool Configurations
# ============================================================================

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.venv
  | \.tox
  | build
  | dist
  | __pycache__
  | \.pytest_cache
  | \.mypy_cache
  | \.hypothesis
  | htmlcov
  | tmp
  | data
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    ".venv/*",
    "build/*",
    "dist/*",
    "*.egg-info/*",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, tighten later
ignore_missing_imports = true  # Many ML libraries lack type stubs
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = false
show_error_codes = true
show_column_numbers = true
pretty = true

# Exclude directories
exclude = [
    '\.venv',
    'build',
    'dist',
    'tmp',
    'data',
]

# Per-module options for libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "google.cloud.*",
    "transformers.*",
    "sentence_transformers.*",
    "scipy.*",
    "sklearn.*",
    "PIL.*",
    "tqdm.*",
    "networkx.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",  # Show summary of all test outcomes
    "--strict-markers",  # Enforce marker registration
    "--strict-config",  # Enforce config validation
    "--cov=embeddings",  # Coverage for embeddings module
    "--cov=graphs",  # Coverage for graphs module
    "--cov-report=term-missing:skip-covered",  # Show missing lines
    "--cov-report=html",  # Generate HTML coverage report
    "--cov-report=json",  # Generate JSON coverage report
    "--cov-fail-under=70",  # Fail if coverage < 70%
    "-v",  # Verbose output
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests (require GCP access)",
    "unit: marks tests as unit tests (fast, no external dependencies)",
    "gpu: marks tests that require GPU (skip on CPU-only machines)",
    "gcp: marks tests that require GCP access (skip in CI without credentials)",
    "expensive: marks tests that cost money to run (GCP API calls)",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::FutureWarning:transformers.*",
]
# Timeout for tests (prevent hanging)
timeout = 300
# Parallel execution (use -n auto for parallel tests)
# addopts = ["-n", "auto"]  # Uncomment to enable parallel tests

[tool.coverage.run]
source = ["embeddings", "graphs", "data"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    ".venv/*",
    "*/smoke_test_gpu.py",  # Exclude smoke tests from coverage
]
branch = true  # Measure branch coverage

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.json]
output = "coverage.json"

[tool.pylint.main]
# Use multiple processes to speed up Pylint
jobs = 0  # Auto-detect CPU count
# Pickle collected data for later comparisons
persistent = true
# Minimum Python version to use for version dependent checks
py-version = "3.10"

[tool.pylint.messages_control]
# Disable some overly strict checks for ML code
disable = [
    "C0103",  # Invalid name (ML code often uses short variable names like x, y)
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0913",  # Too many arguments (common in ML functions)
    "R0914",  # Too many local variables (common in ML pipelines)
    "W0212",  # Access to protected member (common in PyTorch)
    "E1101",  # No member (false positives with PyTorch)
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 10
max-locals = 20
max-branches = 15
max-statements = 60

